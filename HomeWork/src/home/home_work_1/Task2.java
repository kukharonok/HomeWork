package home.home_work_1;

/**
 * 2. Изучить приоритетность операторов по таблице. Сначала посчитать результаты всех ниже приведённых примеров устно,
 * а потом проверить в IDE (в случае ошибок свериться с таблицей приоритетов, повторять просчёт примеров до полного
 * соответствия). Результатом МОЖЕТ БЫТЬ ОШИБКА компиляции, может быть ошибка выполнения программы или корректный
 * результат. Все значения в этих переменных должны быть записаны в int и boolean переменные.
 * Напротив каждой строчки нужно написать комментарий с результатом и объяснением почему вы получили такой результат.
 * 	2.0 ВНИМАНИЕ --8 значит что вам нужно создать переменную, например а, и проинициализировать её 8,
 * 	а дальше её использовать как --а. Данная переменная во всех выражениях должна равняться 8;
 * 	2.1 5 + 2 / 8
 * 	2.2 (5 + 2) / 8
 * 	2.3 (5 + 2++) / 8
 * 	2.4 (5 + 2++) / --8
 * 	2.5 (5 * 2 >> 2++) / --8
 * 	2.6 (5 + 7 > 20 ? 68 : 22 * 2 >> 2++) / --8
 * 	2.7 (5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> 2++) / --8
 * 	2.8 6 - 2 > 3 && 12 * 12 <= 119
 * 	2.9 true && false
 *
 * @author Kukharonok  Andrey
 */
public class Task2 {
    public static void main(String[] args) {
        int a = 8;
        int d = 1;
        // Сначало 2/8 =0, т.к выражение справа по умолчанию int - дробная часть отбрасывается,далее 5+0=5
        int example1 = 5 + 2 / 8; // 5

        int example2 = (5 + 2) / 8; // 0  5+2=7, 7/8=0 т.к выражение справа int - дробная часть отбрасывается

        // int example3 = (5 + 2++) / 8; // ошибка компиляции - к числам инкремент нельзя применять

        // Инкремент d++ учтется в следующей строке; (5+1)=6; 6/8=0 - дробь отбрасывается, т.к. int сппава
        int example3 = (5 + d++) / 8; // 0
        d = 1;

        //int example4 = (5 + 2++) / --a;  // ошибка компиляции - к числам инкремент нельзя применять

        /*
         * Инкремент d++ учтется в следующей строке;декремент --a -> 7 - сразу вычисляется; 5+1=6;
         * 6/7=0; - дробь отбрасывается, т.к. int справа
         */
        int example4 = (5 + d++) / --a;  // 0
        a = 8;
        d = 1;

        // int example5 = (5 * 2 >> 2++) / --a; // ошибка компиляции - к числам инкремент нельзя применять

        /*
         * Инкремент d++ учтется в следующей строке; декремент --a -> 7 - сразу вычисляется; 5*2=10; 10>>1=5;
         * 5/7=0; - дробь отбрасывается, т.к. int справа
         */
        int example5 = (5 * 2 >> d++) / --a; // 0
        a = 8;
        d = 1;

        // int example6 = (5 + 7 > 20 ? 68 : 22 * 2 >> 2++) / --a; // ошибка компиляции -к числам инкремент не применяется

        /*
         * Условие -(5 + 7 > 20) - false поэтому вычисляется (22 * 2 >> d++)/--a;
         * инкремент постфикс учтется в следующей строке;декремент префикс --a -> 7 - сразу вычисляется;
         * 22*2=44; 44>>1=22; 22/7=3; - дробь отбрасывается, т.к. int справа
         */
        int example6 = (5 + 7 > 20 ? 68 : 22 * 2 >> d++) / --a; // 3
        a = 8;
        d = 1;

        /*
         * Ошибка компиляции - к числам инкремент нельзя применять; и выражение (68 >= 68) -дает boolean,
         * а нам нужно int.
         */
        // int example7 = (5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> 2++) / --a;

        /*
         *  Условие -(5 + 7 > 20) - false поэтому вычисляется (22 * 2 >> d++)/--a;
         * инкремент постфикс учтется в следующей строке;декремент префикс --a -> 7 - сразу вычисляется;
         * 22*2=44; 44>>1=22; 22/7=3; - дробь отбрасывается, т.к. int справа
         */
        int example7 = (5 + 7 > 20 ? 68 - 68 : 22 * 2 >> d++) / --a; // 3

        // выражение (6 - 2 > 3) дает true, а (12 * 12 <= 119)дает false. (true && false) дает false
        boolean example8 = 6 - 2 > 3 && 12 * 12 <= 119; // false

        boolean example9 = true && false; // false.  При && если один из операндов = false, результат = false
    }
}
